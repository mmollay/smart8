Datenbankstruktur: ssi_trader2
Stand: 2025-01-30

1. account_transactions
   - Zweck: Speichert Ein- und Auszahlungen der Benutzer
   - Hauptfelder:
     * id (PK)
     * user_id (FK -> users.id)
     * type (deposit/withdrawal)
     * amount
     * currency
     * status
     * transaction_id
     * bitget_timestamp

2. analysis_signals
   - Zweck: Speichert Handelssignale aus der technischen Analyse
   - Hauptfelder:
     * id (PK)
     * symbol
     * timestamp
     * action (buy/sell/hold)
     * confidence
     * entry_price
     * tp_price
     * sl_price
     * reasoning (JSON)
     * result

3. api_credentials
   - Zweck: Verwaltet API-Zugangsdaten für verschiedene Handelsplattformen
   - Hauptfelder:
     * id (PK)
     * user_id (FK -> users.id)
     * platform
     * api_key
     * api_secret
     * api_passphrase
     * is_active
     * permissions (JSON)

4. backtest_equity
   - Zweck: Trackt den Equity-Verlauf während des Backtestings
   - Hauptfelder:
     * id (PK)
     * run_id (FK -> backtest_runs.id)
     * timestamp
     * equity
     * drawdown

5. backtest_runs
   - Zweck: Speichert Backtest-Durchläufe und deren Ergebnisse
   - Hauptfelder:
     * id (PK)
     * symbol
     * interval_type
     * period
     * initial_balance
     * fee_rate
     * total_trades
     * winning_trades
     * losing_trades
     * profit_factor
     * net_profit
     * max_drawdown

6. backtest_trades
   - Zweck: Speichert einzelne Trades während des Backtestings
   - Hauptfelder:
     * id (PK)
     * run_id (FK -> backtest_runs.id)
     * type (long/short)
     * entry_time
     * entry_price
     * exit_time
     * exit_price
     * position_size
     * profit_loss
     * exit_reason

7. orders
   - Zweck: Verwaltet aktive und historische Handelsaufträge
   - Hauptfelder:
     * id (PK)
     * user_id (FK -> users.id)
     * parameter_model_id
     * symbol
     * type
     * side
     * price
     * quantity
     * status
     * bitget_order_id

8. positions
   - Zweck: Trackt aktive Handelspositionen
   - Hauptfelder:
     * id (PK)
     * user_id (FK -> users.id)
     * symbol
     * side
     * entry_price
     * quantity
     * leverage
     * margin_mode
     * stop_loss
     * take_profit

9. trading_parameters
   - Zweck: Speichert Handelsparameter und -strategien
   - Hauptfelder:
     * id (PK)
     * user_id (FK -> users.id)
     * name
     * symbol
     * strategy_type
     * parameters (JSON)
     * is_active

10. trading_triggers
    - Zweck: Definiert Bedingungen für automatische Handelsaktionen
    - Hauptfelder:
      * id (PK)
      * user_id (FK -> users.id)
      * symbol
      * condition_type
      * condition_value
      * action_type
      * action_parameters (JSON)
      * is_active

11. market_data
    - Zweck: Speichert Kerzendaten für verschiedene Zeitintervalle
    - Hauptfelder:
      * id (PK)
      * symbol
      * interval_type
      * timestamp
      * open, high, low, close
      * volume
      * turnover

12. technical_analysis
    - Zweck: Speichert technische Indikatoren für die Handelsstrategie
    - Hauptfelder:
      * id (PK)
      * market_data_id (FK -> market_data.id)
      * adx
      * plus_di
      * minus_di
      * atr
      * roc

13. keltner_channels
    - Zweck: Speichert Keltner Channel Werte für die Positionierung
    - Hauptfelder:
      * id (PK)
      * market_data_id (FK -> market_data.id)
      * upper
      * middle
      * lower

14. live_trades
    - Zweck: Dokumentiert Live-Handelspositionen mit allen relevanten Metriken
    - Hauptfelder:
      * id (PK)
      * symbol
      * type (long/short)
      * entry_time, exit_time
      * entry_price, exit_price
      * position_size
      * stop_loss
      * take_profit
      * profit_loss
      * risk_reward_ratio
      * atr_at_entry
      * adx_at_entry
      * volume_at_entry

15. daily_performance
    - Zweck: Trackt die tägliche Trading-Performance
    - Hauptfelder:
      * id (PK)
      * date
      * starting_balance
      * ending_balance
      * total_trades
      * winning_trades
      * profit_factor
      * max_drawdown

16. api_config
    - Zweck: Verwaltet API-Zugangsdaten zentral
    - Hauptfelder:
      * id (PK)
      * name
      * api_key
      * api_secret
      * passphrase
      * is_active

17. trading_symbols
    - Zweck: Verwaltet handelbare Symbole und deren Eigenschaften
    - Hauptfelder:
      * id (PK)
      * symbol
      * base_currency
      * quote_currency
      * min_leverage
      * max_leverage
      * min_quantity
      * max_quantity
      * tick_size
      * is_active

Beziehungen:
- users -> account_transactions (1:n)
- users -> api_credentials (1:n)
- users -> orders (1:n)
- users -> positions (1:n)
- users -> trading_parameters (1:n)
- users -> trading_triggers (1:n)
- backtest_runs -> backtest_equity (1:n)
- backtest_runs -> backtest_trades (1:n)
- market_data -> technical_analysis (1:n)
- market_data -> keltner_channels (1:n)

Indizes:
- account_transactions: user_id
- analysis_signals: symbol, timestamp
- api_credentials: user_id, platform
- backtest_equity: run_id, timestamp
- orders: user_id, symbol, status
- positions: user_id, symbol
- trading_parameters: user_id, symbol
- trading_triggers: user_id, symbol
- market_data: symbol, interval_type, timestamp
- technical_analysis: market_data_id
- keltner_channels: market_data_id

Hinweise:
1. Alle Zeitstempel werden in UNIX-Timestamp (Sekunden seit 1970) gespeichert
2. Geldbeträge werden mit 8 Dezimalstellen gespeichert (decimal(20,8))
3. JSON-Felder werden für flexible Konfigurationen verwendet
4. Fremdschlüssel-Beziehungen sind mit ON DELETE CASCADE konfiguriert
