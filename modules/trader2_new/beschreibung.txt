Trader2 - Automatisiertes Handelssystem
Stand: 30.01.2025

1. PROJEKTÜBERSICHT
------------------
Das Trader2-System ist eine fortschrittliche Handelsplattform für den automatisierten Kryptowährungshandel, 
speziell entwickelt für die BitGet-Börse. Das System ermöglicht sowohl automatisiertes Trading als auch 
Backtesting von Handelsstrategien.

2. HAUPTKOMPONENTEN
------------------
2.1 Backtesting-Engine
    - Implementiert in Backtesting.php
    - Ermöglicht das Testen von Handelsstrategien auf historischen Daten
    - Berechnet wichtige Metriken wie Gewinn/Verlust, Drawdown und Trefferquote
    - Speichert detaillierte Handelsergebnisse in der Datenbank

2.2 Live-Trading-System
    - BitGet API Integration (BitGet.php, BitgetTrading.php)
    - Echtzeit-Marktdatenverarbeitung über WebSocket (BitgetWebSocket.php)
    - Automatische Orderausführung und Positionsmanagement
    - Risikomanagement und Money Management

2.3 Technische Analyse
    - Implementiert in MarketAnalysis.php und TechnicalIndicators.php
    - Berechnung verschiedener technischer Indikatoren
    - Signalgenerierung für Handelsentscheidungen
    - Marktanalyse und Trendbestimmung

3. TECHNISCHE DETAILS
--------------------
3.1 Systemarchitektur
    - Modularer Aufbau mit klarer Trennung der Komponenten
    - Event-basierte Verarbeitung für Echtzeitdaten
    - Robuste Fehlerbehandlung und Logging
    - Skalierbare Datenbankstruktur

3.2 Datenbank
    - Name: ssi_trader2
    - Wichtige Tabellen:
      * backtest_runs: Speichert Backtest-Durchläufe
      * positions: Aktive Handelspositionen
      * orders: Order-Management
      * trading_parameters: Strategieparameter
    - Siehe db.txt für vollständige Struktur

3.3 API-Integration
    - BitGet REST API für Orders und Kontoverwaltung
    - WebSocket für Echtzeit-Marktdaten
    - Sichere Verwaltung von API-Credentials

4. HANDELSSTRATEGIEN
-------------------
4.1 Implementierte Strategien
    - Trend-following mit ADX und Keltner Channels
    - RSI-basierte Mean Reversion
    - Volumen-Profil-Analyse
    - Multi-Indikator-Confirmation

4.2 Risikomanagement
    - Dynamische Position Sizing
    - Automatische Stop-Loss und Take-Profit
    - Drawdown-Kontrolle
    - Leverage-Management

5. KONFIGURATION
---------------
5.1 Handelskonfiguration
    - Standard-Symbol: ETHUSDT_UMCBL
    - Minimale Preisdifferenz: 1.0
    - Update-Intervall: 5000ms
    - Anpassbare Parameter pro Strategie

5.2 Systemkonfiguration
    - Zeitzone: Europe/Berlin
    - Datenbank: MariaDB 10.4
    - PHP Version: 7.4+
    - XAMPP Umgebung

6. DATEISYSTEM
-------------
Siehe tree.txt für detaillierte Struktur
Hauptverzeichnisse:
- api/: REST-Endpunkte
- classes/: Kernkomponenten
- config/: Konfigurationsdateien
- cron/: Automatisierte Tasks

7. MONITORING & WARTUNG
----------------------
7.1 Logging
    - Handelsaktivitäten
    - Systemfehler
    - Performance-Metriken
    - API-Kommunikation

7.2 Wartungsaufgaben
    - Regelmäßige Datenbankoptimierung
    - Backup der Konfiguration und Daten
    - Überprüfung der API-Verbindungen
    - Update der Handelsparameter

8. ENTWICKLUNGSRICHTLINIEN
-------------------------
8.1 Code-Standards
    - PSR-12 Coding Standard
    - Ausführliche Dokumentation
    - Fehlerbehandlung mit try-catch
    - Typisierte Variablen und Rückgabewerte

8.2 Versionierung
    - Änderungen in change_log.txt dokumentieren
    - Regelmäßige Backups erstellen
    - Wichtige Dateien regelmäßig prüfen

9. SICHERHEIT
------------
9.1 Datensicherheit
    - Verschlüsselte API-Credentials
    - Sichere Datenbankverbindungen
    - Zugriffskontrollen
    - Regelmäßige Sicherheitsüberprüfungen

9.2 Handelssicherheit
    - Validierung aller Eingabeparameter
    - Überprüfung der Ordergrößen
    - Limit für maximalen Verlust
    - Notfall-Stopp-Mechanismen

10. ZUKÜNFTIGE ENTWICKLUNG
-------------------------
10.1 Geplante Erweiterungen
    - Integration weiterer Börsen
    - Erweiterte Backtesting-Funktionen
    - Machine Learning für Signalgenerierung
    - Verbesserte Benutzeroberfläche

10.2 Optimierungspotenzial
    - Performance-Optimierung
    - Erweiterte Risikomodelle
    - Zusätzliche technische Indikatoren
    - Verbessertes Reporting

HINWEISE
--------
- Alle Änderungen in change_log.txt dokumentieren
- Regelmäßige Überprüfung der windsurfrules.txt
- Datenbankstruktur in db.txt aktuell halten
- Verzeichnisstruktur in tree.txt pflegen
