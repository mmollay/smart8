<?php
if (php_sapi_name() !== 'cli') {
    die('Dieses Script kann nur über die Kommandozeile ausgeführt werden');
}

// Basis-Pfad definieren
define('BASE_PATH', realpath(__DIR__ . '/..'));

// Spezifisches Log-Verzeichnis für Newsletter
define('NEWSLETTER_LOG_PATH', BASE_PATH . '/logs');
if (!is_dir(NEWSLETTER_LOG_PATH)) {
    mkdir(NEWSLETTER_LOG_PATH, 0755, true);
}


// Fehlerbehandlung
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);
ini_set('error_log', NEWSLETTER_LOG_PATH . '/batch_error.log');

// Zeit- und Speicherlimits
set_time_limit(3600); // 1 Stunde 
ini_set('memory_limit', '256M');

// Erforderliche Dateien einbinden
require_once BASE_PATH . '/n_config.php';
//require_once BASE_PATH . '/classes/EmailService.php';
require_once BASE_PATH . '/classes/BrevoEmailService.php';
require_once BASE_PATH . '/classes/PlaceholderService.php';
require_once BASE_PATH . '/functions.php';

// Prüfe ob Klassen geladen wurden
// if (!class_exists('EmailService') || !class_exists('PlaceholderService')) {
//     die("Erforderliche Klassen nicht gefunden\n");
// }

if (!class_exists('BrevoEmailService') || !class_exists('PlaceholderService')) {


// Kommandozeilenargumente verarbeiten
$options = getopt('', ['content-id:', 'job-ids:']);
if (!isset($options['content-id']) || !isset($options['job-ids'])) {
    die("Erforderliche Parameter fehlen\n");
}

$contentId = (int) $options['content-id'];
$jobIds = explode(',', $options['job-ids']);
$processId = getmypid();

// Am Anfang der Datei nach den defines
define('LOG_PATH', '/var/www/ssi/smart8/logs');

// Logging-Funktion anpassen
function writeLog($message, $type = 'INFO', $includeMemory = false)
{
    static $startTime;
    if (!isset($startTime)) {
        $startTime = microtime(true);
    }

    $timestamp = date('Y-m-d H:i:s');
    $processId = getmypid();
    $logMessage = "[$timestamp][$type][PID:$processId] $message";

    if ($includeMemory) {
        $memoryUsage = memory_get_usage(true);
        $peakMemory = memory_get_peak_usage(true);
        $runtime = round(microtime(true) - $startTime, 2);

        $logMessage .= sprintf(
            "\nMemory: %s MB | Peak: %s MB | Runtime: %s seconds",
            round($memoryUsage / 1024 / 1024, 2),
            round($peakMemory / 1024 / 1024, 2),
            $runtime
        );
    }

    $logMessage .= "\n";
    $logFile = LOG_PATH . '/cron_controller.log';

    // Erstelle Log-Verzeichnis falls es nicht existiert
    if (!is_dir(LOG_PATH)) {
        mkdir(LOG_PATH, 0755, true);
    }

    file_put_contents($logFile, $logMessage, FILE_APPEND);

    if ($type === 'CRITICAL') {
        error_log($message);
    }
}


// user_id aus der Datenbank holen basierend auf content_id
$stmt = $db->prepare("
    SELECT user_id 
    FROM email_contents 
    WHERE id = ?
");
$stmt->bind_param("i", $contentId);
$stmt->execute();
$result = $stmt->get_result();
$userData = $result->fetch_assoc();

if (!$userData) {
    writeLog("Keine user_id für content_id: $contentId gefunden", 'ERROR', true);
    die("Fehler: Keine user_id gefunden\n");
}

$userId = $userData['user_id'];
$uploadBasePath = $_ENV['UPLOAD_PATH'] . '/' . $userId . '/newsletters' . '/' . $contentId . "/attachements/";

writeLog("Starte Batch-Verarbeitung für Content ID: $contentId mit Jobs: " . implode(',', $jobIds), 'INFO', $batchLogFile);
writeLog("Upload Base Path: " . $uploadBasePath, 'INFO', true);
writeLog("Base Path: " . BASE_PATH, 'INFO', true);

try {
    // Services initialisieren
    // $emailService = new EmailService(
    //     $db,
    //     $mailjetConfig['api_key'],
    //     $mailjetConfig['api_secret'],
    //     $uploadBasePath
    // );

    $brevoConfig = $config['brevo'] ?? [];
    $apiKey = $_ENV['BREVO_API_KEY'] ?? $brevoConfig['api_key'] ?? '';

    if (empty($apiKey)) {
        throw new Exception("Brevo API Key nicht gefunden. Bitte in n_config.php oder config.php konfigurieren");
    }

    $emailService = new BrevoEmailService(
        $db,
        $apiKey,
        $uploadBasePath
    );


    $placeholderService = PlaceholderService::getInstance();

    $successCount = 0;
    $errorCount = 0;
    $skippedCount = 0;

    // Verarbeite Jobs
    foreach ($jobIds as $jobId) {
        try {
            // Prüfe den Job-Status und den Empfänger-Status
            $checkStmt = $db->prepare("
                SELECT r.unsubscribed, ej.status, r.email
                FROM email_jobs ej
                JOIN recipients r ON ej.recipient_id = r.id
                WHERE ej.id = ?
            ");
            $checkStmt->bind_param("i", $jobId);
            $checkStmt->execute();
            $result = $checkStmt->get_result()->fetch_assoc();

            if (!$result) {
                writeLog("Job ID $jobId nicht gefunden", 'ERROR', $batchLogFile);
                $errorCount++;
                continue;
            }

            // Überspringe abgemeldete Empfänger
            if ($result['unsubscribed']) {
                writeLog("Job ID $jobId übersprungen - Empfänger abgemeldet", 'INFO', $batchLogFile);
                markJobSkipped($db, $jobId, "Empfänger hat sich abgemeldet");
                $skippedCount++;
                continue;
            }

            // Überspringe Jobs die nicht mehr 'pending' oder 'processing' sind
            if (!in_array($result['status'], ['pending', 'processing'])) {
                writeLog("Job ID $jobId übersprungen - Status ist " . $result['status'], 'INFO', $batchLogFile);
                $skippedCount++;
                continue;
            }

            processJob($db, $emailService, $placeholderService, $contentId, $jobId, $batchLogFile);
            $successCount++;
            usleep(100000); // 100ms Pause zwischen E-Mails
        } catch (Exception $e) {
            writeLog("Fehler bei Job ID $jobId: " . $e->getMessage(), 'ERROR', $batchLogFile);
            markJobFailed($db, $jobId, $e->getMessage());
            $errorCount++;
            continue;
        }
    }

    writeLog("Batch abgeschlossen. Erfolge: $successCount, Fehler: $errorCount, Übersprungen: $skippedCount", 'INFO', $batchLogFile);

} catch (Exception $e) {
    writeLog("Kritischer Fehler: " . $e->getMessage(), 'CRITICAL', $batchLogFile);
    die("Kritischer Fehler: " . $e->getMessage() . "\n");
}

/**
 * Verarbeitet einen einzelnen Email-Job
 */
function processJob($db, $emailService, $placeholderService, $contentId, $jobId, $batchLogFile)
{
    // Verbesserte Protokollierungsfunktion für E-Mails
    function logEmailResult($success, $recipient, $result, $jobId) {
        if ($success) {
            writeLog("E-Mail erfolgreich an " . $recipient['email'] . " gesendet. Message-ID: " . $result['message_id'], 'INFO');
        } else {
            $errorMsg = $result['error'] ?? 'Unbekannter Fehler beim Versenden der E-Mail';
            writeLog("Fehler beim Senden an " . $recipient['email'] . ": " . $errorMsg, 'ERROR');
        }
    }

    global $_ENV;

    $jobId = (int) $jobId;
    writeLog("Verarbeite Job $jobId", 'INFO', $batchLogFile);

    // Job-Daten laden mit Transaktion
    $db->begin_transaction();

    try {
        $stmt = $db->prepare("
            SELECT ej.*, 
                   ec.subject, 
                   ec.message,
                   s.email as sender_email,
                   s.first_name as sender_first_name,
                   s.last_name as sender_last_name,
                   r.email as recipient_email,
                   r.first_name as recipient_first_name,
                   r.last_name as recipient_last_name,
                   r.gender as recipient_gender,
                   r.title as recipient_title,
                   r.company as recipient_company,
                   r.unsubscribed
            FROM email_jobs ej
            JOIN email_contents ec ON ej.content_id = ec.id
            JOIN senders s ON ej.sender_id = s.id
            JOIN recipients r ON ej.recipient_id = r.id
            WHERE ej.id = ? 
            AND ej.content_id = ?
            AND ej.status IN ('pending', 'processing')
            FOR UPDATE
        ");

        $stmt->bind_param("ii", $jobId, $contentId);
        $stmt->execute();
        $job = $stmt->get_result()->fetch_assoc();

        if (!$job) {
            throw new Exception("Job $jobId nicht gefunden oder nicht mehr verfügbar");
        }

        // Nochmalige Prüfung des Abmeldestatus
        if ($job['unsubscribed']) {
            $db->commit();
            markJobSkipped($db, $jobId, "Empfänger hat sich abgemeldet");
            return;
        }

        writeLog("Verarbeite E-Mail für: " . $job['recipient_email'], 'INFO', $batchLogFile);

        // Empfängerdaten für den PlaceholderService aufbereiten
        $recipientData = [
            'first_name' => $job['recipient_first_name'],
            'last_name' => $job['recipient_last_name'],
            'email' => $job['recipient_email'],
            'company' => $job['recipient_company'],
            'gender' => $job['recipient_gender'],
            'title' => $job['recipient_title']
        ];

        // Platzhalter über den Service erstellen
        $placeholders = $placeholderService->createPlaceholders($recipientData);

        // Korrekte Basis-URL aus Konfiguration
        $APP_URL = $_ENV['APP_URL'] ?? 'https://newsletter.ssi.at';

        // Subject und Message mit Platzhaltern ersetzen
        $subject = $placeholderService->replacePlaceholders($job['subject'], $placeholders);
        $message = $placeholderService->replacePlaceholders($job['message'], $placeholders);
        $message = prepareHtmlForEmail($message);
        // URLs absolut machen
        $message = makeUrlsAbsolute($message, $APP_URL);

        writeLog("Platzhalter erfolgreich ersetzt und URLs angepasst", 'INFO', $batchLogFile);

        // Abmelde-Link hinzufügen
        $unsubscribeUrl = $APP_URL . "/modules/newsletter/unsubscribe.php?email=" .
            urlencode($job['recipient_email']) . "&id=" . $job['id'];
        $unsubscribeLink = "<br><br><hr><p style='font-size: 12px; color: #666;'>
            Falls Sie keine weiteren E-Mails erhalten möchten, 
            können Sie sich hier <a href='{$unsubscribeUrl}'>abmelden</a>.</p>";
        $message .= $unsubscribeLink;

        // Absender- und Empfängerdaten
        $sender = [
            'email' => $job['sender_email'],
            'name' => trim($job['sender_first_name'] . ' ' . $job['sender_last_name'])
        ];

        $recipient = [
            'email' => $job['recipient_email'],
            'name' => trim($job['recipient_first_name'] . ' ' . $job['recipient_last_name'])
        ];

        // Email senden
        $sendResult = $emailService->sendSingleEmail(
            $contentId,
            $sender,
            $recipient,
            $subject,
            $message,
            $job['id']
        );

        if ($sendResult['success']) {
            // Update job status
            $updateStmt = $db->prepare("
                UPDATE email_jobs 
                SET status = 'send',
                    sent_at = NOW(),
                    message_id = ?,
                    updated_at = NOW()
                WHERE id = ?
            ");
            $updateStmt->bind_param("si", $sendResult['message_id'], $job['id']);
            $updateStmt->execute();

            // Log success
            $logStmt = $db->prepare("
                INSERT INTO email_logs 
                (job_id, status, response, created_at) 
                VALUES (?, 'send', 'Email erfolgreich gesendet', NOW())
            ");
            $logStmt->bind_param("i", $job['id']);
            $logStmt->execute();

            $db->commit();
            writeLog("E-Mail erfolgreich gesendet an: " . $job['recipient_email'], 'INFO', $batchLogFile);
        } else {
            throw new Exception($sendResult['error'] ?? 'Unbekannter Fehler');
        }
    } catch (Exception $e) {
        $db->rollback();
        throw $e;
    }
}

/**
 * Markiert einen Job als übersprungen
 */
function markJobSkipped($db, $jobId, $reason)
{
    $db->begin_transaction();
    try {
        $stmt = $db->prepare("
            UPDATE email_jobs 
            SET status = 'skipped',
                error_message = ?,
                updated_at = NOW()
            WHERE id = ?
        ");
        $stmt->bind_param("si", $reason, $jobId);
        $stmt->execute();

        $stmt = $db->prepare("
            INSERT INTO email_logs 
            (job_id, status, response, created_at)
            VALUES (?, 'skipped', ?, NOW())
        ");
        $stmt->bind_param("is", $jobId, $reason);
        $stmt->execute();

        $db->commit();
    } catch (Exception $e) {
        $db->rollback();
        writeLog("Fehler beim Markieren als übersprungen: " . $e->getMessage(), 'ERROR');
    }
}

/**
 * Markiert einen Job als fehlgeschlagen
 */
function markJobFailed($db, $jobId, $error)
{
    $db->begin_transaction();
    try {
        $stmt = $db->prepare("
            UPDATE email_jobs 
            SET status = 'failed',
                error_message = ?,
                updated_at = NOW()
            WHERE id = ?
        ");
        $errorMessageDb = substr($error, 0, 255);
        $stmt->bind_param("si", $errorMessageDb, $jobId);
        $stmt->execute();

        $stmt = $db->prepare("
            INSERT INTO email_logs 
            (job_id, status, response, created_at)
            VALUES (?, 'failed', ?, NOW())
        ");
        $stmt->bind_param("is", $jobId, $error);
        $stmt->execute();

        $db->commit();
    } catch (Exception $e) {
        $db->rollback();
        writeLog("Fehler beim Markieren als fehlgeschlagen: " . $e->getMessage(), 'ERROR');
    }
}
