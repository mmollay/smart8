<?php
require_once(__DIR__ . '/../../../vendor/autoload.php');

use Brevo\Client\Api\TransactionalEmailsApi;
use Brevo\Client\Configuration;
use Brevo\Client\Model\SendSmtpEmail;
use Brevo\Client\Model\SendSmtpEmailAttachment;
use GuzzleHttp\Client;

class BrevoEmailService
{
    private $db;
    private $apiInstance;
    private $uploadBasePath;

    public function __construct($db, $apiKey, $uploadBasePath)
    {
        $this->db = $db;
        
        // Konfiguration für Brevo API
        $config = Configuration::getDefaultConfiguration()->setApiKey('api-key', $apiKey);
        $this->apiInstance = new TransactionalEmailsApi(
            new Client(),
            $config
        );
        
        $this->uploadBasePath = $uploadBasePath;
    }

    public function sendSingleEmail($contentId, array $sender, array $recipient, string $subject, string $message, $jobId = null, $isTest = false)
    {
        try {
            // Debug log
            error_log("Starting email send process for jobId: " . ($jobId ?? 'test'));

            // Validate sender and recipient data
            if (empty($sender['email']) || empty($recipient['email'])) {
                throw new Exception('Sender and recipient email addresses are required');
            }

            // Prepare attachments
            $attachments = $this->prepareAttachments();

            // Create a new SendSmtpEmail instance
            $sendSmtpEmail = new SendSmtpEmail();
            
            // Set sender
            $sendSmtpEmail->setSender(['email' => $sender['email'], 'name' => $sender['name'] ?? '']);
            
            // Set recipient
            $sendSmtpEmail->setTo([['email' => $recipient['email'], 'name' => $recipient['name'] ?? '']]);
            
            // Set email content
            $sendSmtpEmail->setSubject($subject);
            $sendSmtpEmail->setHtmlContent($message);
            $sendSmtpEmail->setTextContent(strip_tags($message));
            
            // Set a custom ID for tracking
            $customId = $isTest ? "test_mail_{$contentId}" : "job_{$jobId}_{$contentId}_" . time();
            $sendSmtpEmail->setTags([$customId]);
            
            // Set tracking parameters
            $sendSmtpEmail->setParams([
                'trackOpens' => true,
                'trackClicks' => true,
                'customId' => $customId
            ]);
            
            // Add attachments if there are any
            if (!empty($attachments)) {
                $sendSmtpEmail->setAttachment($attachments);
            }

            // Debug log the request
            error_log("Sending request to Brevo with data: " . json_encode([
                'to' => $recipient['email'],
                'from' => $sender['email'],
                'subject' => $subject,
                'customId' => $customId
            ]));

            // Send the email using Brevo
            $result = $this->apiInstance->sendTransacEmail($sendSmtpEmail);

            // Debug log the complete response
            error_log("Brevo response: " . print_r($result, true));

            // Extract message ID
            $messageId = isset($result['messageId']) ? $result['messageId'] : '';
            
            // Log success status
            if (!$isTest) {
                try {
                    $stmt = $this->db->prepare("
                        INSERT INTO email_logs 
                        (job_id, status, response, created_at) 
                        VALUES (?, 'send', ?, NOW())
                    ");
                    $messageIdText = "MessageID: " . $messageId;
                    $stmt->bind_param("is", $jobId, $messageIdText);
                    $stmt->execute();
                } catch (Exception $e) {
                    error_log("Failed to log email success: " . $e->getMessage());
                }
            }

            return [
                'success' => true,
                'message_id' => $messageId,
                'message' => 'Email sent successfully'
            ];
            
        } catch (Exception $e) {
            error_log("Exception in sendSingleEmail: " . $e->getMessage());

            // Log exception
            if (!$isTest && isset($jobId)) {
                try {
                    $stmt = $this->db->prepare("
                        INSERT INTO email_logs 
                        (job_id, status, response, created_at) 
                        VALUES (?, 'error', ?, NOW())
                    ");
                    $stmt->bind_param("is", $jobId, $e->getMessage());
                    $stmt->execute();
                } catch (Exception $logError) {
                    error_log("Failed to log email exception: " . $logError->getMessage());
                }
            }

            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    private function prepareAttachments()
    {
        $attachments = [];
        $directory = rtrim($this->uploadBasePath, '/');

        // Grundlegende Verzeichnisprüfung
        if (!is_dir($directory) || !is_readable($directory)) {
            error_log("Directory not accessible: " . $directory);
            return $attachments;
        }

        $files = scandir($directory);
        if ($files === false) {
            error_log("Could not scan directory: " . $directory);
            return $attachments;
        }

        foreach ($files as $file) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            $full_path = $directory . '/' . $file;

            if (!is_file($full_path) || !is_readable($full_path)) {
                continue;
            }

            try {
                $fileContent = file_get_contents($full_path);
                if ($fileContent === false) {
                    continue;
                }

                $mime_type = mime_content_type($full_path) ?: 'application/octet-stream';

                $attachment = new SendSmtpEmailAttachment();
                $attachment->setContent(base64_encode($fileContent));
                $attachment->setName($file);
                
                $attachments[] = $attachment;
            } catch (Exception $e) {
                error_log("Error processing attachment: " . $e->getMessage());
                continue;
            }
        }

        return $attachments;
    }

    public function updateNewsletterStatus($contentId, $status)
    {
        try {
            $stmt = $this->db->prepare("
                UPDATE email_contents 
                SET status = ?, 
                    completed_at = NOW() 
                WHERE id = ?
            ");
            $stmt->bind_param("ii", $status, $contentId);
            return $stmt->execute();
        } catch (Exception $e) {
            error_log("Failed to update newsletter status: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Verarbeitet Webhook-Events von Brevo
     */
    public function handleBrevoEvent($event)
    {
        try {
            $messageId = $event['message-id'] ?? '';
            $email = $event['email'] ?? '';
            $eventType = $this->mapBrevoEventType($event['event'] ?? '');
            
            // Extrahiere job_id aus Tags oder benutzerdefinierten Headern
            $customId = isset($event['tags']) && is_array($event['tags']) && !empty($event['tags']) ? 
                        $event['tags'][0] : '';
                        
            if (empty($customId) && isset($event['params']['customId'])) {
                $customId = $event['params']['customId'];
            }
            
            preg_match('/job_(\d+)_/', $customId, $matches);
            $jobId = isset($matches[1]) ? $matches[1] : null;

            if ($jobId) {
                // Aktualisiere Job-Status
                $stmt = $this->db->prepare("
                    UPDATE email_jobs 
                    SET status = ?,
                        message_id = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $stmt->bind_param("ssi", $eventType, $messageId, $jobId);
                $stmt->execute();

                // Logge Event
                $stmt = $this->db->prepare("
                    INSERT INTO status_log (
                        event, 
                        timestamp, 
                        message_id, 
                        email
                    ) VALUES (?, NOW(), ?, ?)
                ");
                $stmt->bind_param("sss", $eventType, $messageId, $email);
                $stmt->execute();

                // Spezielle Event-Behandlung
                $this->handleSpecialEvents($eventType, $email);
            }

            return true;
        } catch (Exception $e) {
            error_log("Failed to handle Brevo event: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Spezielle Event-Behandlung für verschiedene Ereignistypen
     */
    private function handleSpecialEvents($eventType, $email)
    {
        switch ($eventType) {
            case 'bounce':
            case 'blocked':
                $bounceType = ($eventType === 'bounce') ? 'hard' : 'soft';
                $stmt = $this->db->prepare("
                    UPDATE recipients 
                    SET bounce_status = ?,
                        last_bounce_at = NOW()
                    WHERE email = ?
                ");
                $stmt->bind_param("ss", $bounceType, $email);
                $stmt->execute();
                break;

            case 'spam':
            case 'unsub':
                $stmt = $this->db->prepare("
                    UPDATE recipients 
                    SET unsubscribed = 1,
                        unsubscribed_at = NOW()
                    WHERE email = ?
                ");
                $stmt->bind_param("s", $email);
                $stmt->execute();
                break;
        }
    }
    
    /**
     * Mappt Brevo-Ereignistypen auf das vorhandene Mailjet-Ereignisformat
     */
    private function mapBrevoEventType($breevoEventType)
    {
        $eventMap = [
            'delivered' => 'delivered',
            'opened' => 'open',
            'clicked' => 'click',
            'hardBounce' => 'bounce',
            'softBounce' => 'blocked',
            'complaint' => 'spam',
            'unsubscribe' => 'unsub',
            'error' => 'failed'
        ];
        
        return isset($eventMap[$breevoEventType]) ? $eventMap[$breevoEventType] : $breevoEventType;
    }

    /**
     * Prüft den Status einer E-Mail
     */
    public function checkEmailStatus($jobId)
    {
        $stmt = $this->db->prepare("
            SELECT 
                ej.status,
                ej.message_id,
                ej.error_message,
                ej.sent_at,
                r.email,
                r.bounce_status,
                r.unsubscribed
            FROM email_jobs ej
            JOIN recipients r ON ej.recipient_id = r.id
            WHERE ej.id = ?
        ");
        $stmt->bind_param("i", $jobId);
        $stmt->execute();
        return $stmt->get_result()->fetch_assoc();
    }
}
